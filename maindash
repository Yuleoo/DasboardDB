<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Database Management Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>Q
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .card {
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s;
        }
        .card:hover {
            transform: translateY(-3px);
        }
        .sidebar-item {
            transition: all 0.2s;
        }
        .sidebar-item:hover {
            background-color: #fff9e6;
            border-left: 4px solid #ffc107;
        }
        .sidebar-item.active {
            background-color: #fff9e6;
            border-left: 4px solid #ffc107;
        }
        .table-container {
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            border-radius: 8px;
            overflow: hidden;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th {
            background-color: #f9fafb;
            text-align: left;
            padding: 12px 16px;
            font-weight: 600;
            color: #374151;
            border-bottom: 1px solid #e5e7eb;
        }
        td {
            padding: 12px 16px;
            border-bottom: 1px solid #e5e7eb;
        }
        tr:hover {
            background-color: #f9fafb;
        }
        .action-icon {
            cursor: pointer;
            padding: 6px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        .action-icon:hover {
            background-color: #f3f4f6;
        }
        .sync-button {
            transition: all 0.2s;
        }
        .sync-button:hover {
            transform: rotate(180deg);
        }
        .sync-button.spinning {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        .status-active {
            background-color: #dcfce7;
            color: #166534;
        }
        .status-inactive {
            background-color: #fee2e2;
            color: #991b1b;
        }
        .status-maintenance {
            background-color: #fef3c7;
            color: #92400e;
        }
        .btn-add {
            transition: all 0.2s;
        }
        .btn-add:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body class="bg-gray-50 flex h-screen">
    <!-- Left Sidebar -->
    <div class="w-64 bg-white shadow-md flex flex-col">
        <div class="p-4 border-b border-gray-200">
            <h1 class="text-xl font-bold flex items-center">
                <i class="fas fa-database mr-2 text-amber-500"></i>
                DB Manager
            </h1>
        </div>
        <div class="flex-1 overflow-y-auto">
            <div class="py-2">
                <a href="#" class="sidebar-item active flex items-center px-4 py-3 text-gray-700">
                    <i class="fas fa-chart-line w-6 text-amber-500"></i>
                    <span>Dashboard</span>
                </a>
                <a href="#" class="sidebar-item flex items-center px-4 py-3 text-gray-700">
                    <i class="fas fa-server w-6 text-gray-500"></i>
                    <span>Database Servers</span>
                </a>
                <a href="#" class="sidebar-item flex items-center px-4 py-3 text-gray-700">
                    <i class="fas fa-file-alt w-6 text-gray-500"></i>
                    <span>Reports</span>
                </a>
                <a href="#" class="sidebar-item flex items-center px-4 py-3 text-gray-700">
                    <i class="fas fa-cog w-6 text-gray-500"></i>
                    <span>Settings</span>
                </a>
                <a href="#" class="sidebar-item flex items-center px-4 py-3 text-gray-700">
                    <i class="fas fa-question-circle w-6 text-gray-500"></i>
                    <span>Help</span>
                </a>
            </div>
        </div>
        <div class="p-4 border-t border-gray-200">
            <div class="flex items-center">
                <div class="w-10 h-10 rounded-full bg-amber-500 flex items-center justify-center text-white font-bold">
                    AD
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-700">Admin User</p>
                    <p class="text-xs text-gray-500">admin@example.com</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="flex-1 flex flex-col overflow-hidden">
        <!-- Top Header -->
        <header class="bg-white shadow-sm p-4">
            <div class="flex justify-between items-center">
                <h2 class="text-xl font-semibold text-gray-800">Database Dashboard</h2>
                <div class="flex items-center space-x-4">
                    <button id="syncButton" class="flex items-center px-3 py-2 bg-amber-500 text-white rounded-md hover:bg-amber-600 transition">
                        <i class="fas fa-sync-alt mr-2 sync-button"></i>
                        Sync Data
                    </button>
                    <div class="text-sm text-gray-500" id="lastSyncTime">Last sync: Never</div>
                </div>
            </div>
        </header>

        <!-- Dashboard Content -->
        <main class="flex-1 overflow-y-auto p-4">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <div class="card bg-amber-50 p-4">
                    <div class="flex justify-between">
                        <div>
                            <p class="text-sm text-gray-600">Total Database Servers</p>
                            <h3 class="text-2xl font-bold text-gray-800" id="totalServers">0</h3>
                        </div>
                        <div class="h-10 w-10 rounded-full bg-amber-100 flex items-center justify-center">
                            <i class="fas fa-database text-amber-500"></i>
                        </div>
                    </div>
                    <div class="mt-2 flex items-center text-sm">
                        <span class="text-green-600 flex items-center">
                            <i class="fas fa-arrow-up mr-1"></i>
                            <span id="totalServersChange">0%</span>
                        </span>
                        <span class="text-gray-500 ml-2">from last month</span>
                    </div>
                </div>

                <div class="card bg-red-50 p-4">
                    <div class="flex justify-between">
                        <div>
                            <p class="text-sm text-gray-600">Production Databases</p>
                            <h3 class="text-2xl font-bold text-gray-800" id="prodServers">0</h3>
                        </div>
                        <div class="h-10 w-10 rounded-full bg-red-100 flex items-center justify-center">
                            <i class="fas fa-server text-red-500"></i>
                        </div>
                    </div>
                    <div class="mt-2 flex items-center text-sm">
                        <span class="text-green-600 flex items-center">
                            <i class="fas fa-arrow-up mr-1"></i>
                            <span id="prodServersChange">0%</span>
                        </span>
                        <span class="text-gray-500 ml-2">from last month</span>
                    </div>
                </div>

                <div class="card bg-blue-50 p-4">
                    <div class="flex justify-between">
                        <div>
                            <p class="text-sm text-gray-600">Development Databases</p>
                            <h3 class="text-2xl font-bold text-gray-800" id="devServers">0</h3>
                        </div>
                        <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                            <i class="fas fa-code text-blue-500"></i>
                        </div>
                    </div>
                    <div class="mt-2 flex items-center text-sm">
                        <span class="text-red-600 flex items-center">
                            <i class="fas fa-arrow-down mr-1"></i>
                            <span id="devServersChange">0%</span>
                        </span>
                        <span class="text-gray-500 ml-2">from last month</span>
                    </div>
                </div>

                <div class="card bg-yellow-50 p-4">
                    <div class="flex justify-between">
                        <div>
                            <p class="text-sm text-gray-600">Testing Databases</p>
                            <h3 class="text-2xl font-bold text-gray-800" id="testServers">0</h3>
                        </div>
                        <div class="h-10 w-10 rounded-full bg-yellow-100 flex items-center justify-center">
                            <i class="fas fa-vial text-yellow-500"></i>
                        </div>
                    </div>
                    <div class="mt-2 flex items-center text-sm">
                        <span class="text-green-600 flex items-center">
                            <i class="fas fa-arrow-up mr-1"></i>
                            <span id="testServersChange">0%</span>
                        </span>
                        <span class="text-gray-500 ml-2">from last month</span>
                    </div>
                </div>
            </div>

            <!-- Charts Section -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <!-- Databases by Type Chart -->
                <div class="card bg-white p-4">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="font-semibold text-gray-700">Databases by Type</h3>
                        <div class="flex space-x-2">
                            <button class="px-3 py-1 text-xs bg-amber-500 text-white rounded-md db-type-filter active" data-filter="all">All</button>
                            <button class="px-3 py-1 text-xs bg-gray-200 text-gray-700 rounded-md db-type-filter" data-filter="prod">Production</button>
                        </div>
                    </div>
                    <div class="h-64">
                        <canvas id="dbTypeChart"></canvas>
                    </div>
                </div>

                <!-- Databases by Environment Chart -->
                <div class="card bg-white p-4">
                    <h3 class="font-semibold text-gray-700 mb-4">Databases by Environment</h3>
                    <div class="h-64">
                        <canvas id="dbEnvChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Database Breakdown by Environment -->
            <div class="card bg-white p-4 mb-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="font-semibold text-gray-700">Detailed Database Breakdown by Environment</h3>
                    <button class="px-3 py-1 text-xs bg-gray-200 text-gray-700 rounded-md flex items-center">
                        <i class="fas fa-file-csv mr-1"></i>
                        Export CSV
                    </button>
                </div>
                <div class="table-container">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th>Database Type</th>
                                <th>PROD</th>
                                <th>DEV</th>
                                <th>UAT</th>
                                <th>SIT</th>
                                <th>TOTAL</th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody id="dbBreakdownTable">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- All Databases Table -->
            <div class="card bg-white p-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="font-semibold text-gray-700">All Databases</h3>
                    <div class="flex items-center space-x-2">
                        <input type="text" id="searchInput" placeholder="Search..." class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-500">
                        <select id="filterSelect" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-500">
                            <option value="all">All Environments</option>
                            <option value="PROD">Production</option>
                            <option value="DEV">Development</option>
                            <option value="UAT">UAT</option>
                            <option value="SIT">SIT</option>
                        </select>
                        <button id="addNewDbBtn" class="btn-add px-4 py-2 bg-amber-500 text-white rounded-md hover:bg-amber-600 flex items-center">
                            <i class="fas fa-plus mr-2"></i>
                            Add New
                        </button>
                    </div>
                </div>
                <div class="table-container overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>System Name</th>
                                <th>IP</th>
                                <th>Hostname</th>
                                <th>Type</th>
                                <th>Version</th>
                                <th>OS</th>
                                <th>Priority</th>
                                <th>Environment</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="allDatabasesTable">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                <div class="mt-4 flex justify-between items-center">
                    <div class="text-sm text-gray-500">
                        Showing <span id="visibleCount">0</span> of <span id="totalCount">0</span> databases
                    </div>
                    <div class="flex space-x-2">
                        <button id="prevPage" class="px-3 py-1 bg-gray-200 text-gray-700 rounded-md disabled:opacity-50">Previous</button>
                        <span id="pageIndicator" class="px-3 py-1">Page 1</span>
                        <button id="nextPage" class="px-3 py-1 bg-gray-200 text-gray-700 rounded-md disabled:opacity-50">Next</button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-2xl">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold" id="modalTitle">Edit Database</h3>
                <button id="closeModal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="editForm" class="space-y-4">
                <input type="hidden" id="editId">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">System Name</label>
                        <input type="text" id="editSystemName" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">IP Address</label>
                        <input type="text" id="editIp" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Hostname</label>
                        <input type="text" id="editHostname" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Database Type</label>
                        <select id="editType" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="MySQL">MySQL</option>
                            <option value="PostgreSQL">PostgreSQL</option>
                            <option value="MSSQL">MSSQL</option>
                            <option value="MariaDB">MariaDB</option>
                            <option value="Oracle">Oracle</option>
                            <option value="MongoDB">MongoDB</option>
                            <option value="Redis">Redis</option>
                            <option value="SQLite">SQLite</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Version</label>
                        <input type="text" id="editVersion" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Edition</label>
                        <input type="text" id="editEdition" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">OS</label>
                        <input type="text" id="editOs" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                        <select id="editPriority" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="High">High</option>
                            <option value="Medium">Medium</option>
                            <option value="Low">Low</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">End of Support</label>
                        <input type="date" id="editEndOfSupport" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Environment</label>
                        <select id="editEnvironment" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="PROD">PROD</option>
                            <option value="DEV">DEV</option>
                            <option value="UAT">UAT</option>
                            <option value="SIT">SIT</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">PIC</label>
                        <input type="text" id="editPic" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <select id="editStatus" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                            <option value="Maintenance">Maintenance</option>
                        </select>
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                    <textarea id="editNote" class="w-full px-3 py-2 border border-gray-300 rounded-md" rows="3"></textarea>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" id="cancelEdit" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-amber-500 text-white rounded-md hover:bg-amber-600">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Data storage
        let databaseData = [];
        let currentPage = 1;
        const itemsPerPage = 10;
        let filteredData = [];
        let isEditMode = true; // true for edit, false for add new
        
        // Initialize charts
        let dbTypeChart, dbEnvChart;
        
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize charts
            initializeCharts();
            
            // Fetch data from Google Sheets
            fetchGoogleSheetsData();
            
            // Event listeners
            document.getElementById('syncButton').addEventListener('click', fetchGoogleSheetsData);
            document.getElementById('searchInput').addEventListener('input', filterAndDisplayData);
            document.getElementById('filterSelect').addEventListener('change', filterAndDisplayData);
            document.getElementById('prevPage').addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    displayDatabases();
                }
            });
            document.getElementById('nextPage').addEventListener('click', () => {
                const maxPage = Math.ceil(filteredData.length / itemsPerPage);
                if (currentPage < maxPage) {
                    currentPage++;
                    displayDatabases();
                }
            });
            
            // Add New Database button
            document.getElementById('addNewDbBtn').addEventListener('click', showAddNewModal);
            
            // Modal event listeners
            document.getElementById('closeModal').addEventListener('click', closeModal);
            document.getElementById('cancelEdit').addEventListener('click', closeModal);
            document.getElementById('editForm').addEventListener('submit', function(e) {
                e.preventDefault();
                if (isEditMode) {
                    saveChanges();
                } else {
                    addNewDatabase();
                }
            });
            
            // Database type filter buttons
            document.querySelectorAll('.db-type-filter').forEach(button => {
                button.addEventListener('click', function() {
                    document.querySelectorAll('.db-type-filter').forEach(btn => {
                        btn.classList.remove('active', 'bg-amber-500', 'text-white');
                        btn.classList.add('bg-gray-200', 'text-gray-700');
                    });
                    this.classList.remove('bg-gray-200', 'text-gray-700');
                    this.classList.add('active', 'bg-amber-500', 'text-white');
                    updateDbTypeChart(this.dataset.filter);
                });
            });
        });

        function initializeCharts() {
            // Database Type Chart
            const dbTypeCtx = document.getElementById('dbTypeChart').getContext('2d');
            dbTypeChart = new Chart(dbTypeCtx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Number of Databases',
                        data: [],
                        backgroundColor: '#ffc107',
                        borderColor: '#ffc107',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
            
            // Database Environment Chart
            const dbEnvCtx = document.getElementById('dbEnvChart').getContext('2d');
            dbEnvChart = new Chart(dbEnvCtx, {
                type: 'doughnut',
                data: {
                    labels: ['PROD', 'DEV', 'UAT', 'SIT'],
                    datasets: [{
                        data: [0, 0, 0, 0],
                        backgroundColor: [
                            '#ef4444', // Red for PROD
                            '#3b82f6', // Blue for DEV
                            '#f97316', // Orange for UAT
                            '#22c55e'  // Green for SIT
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        async function fetchGoogleSheetsData() {
            // Show loading state
            const syncButton = document.getElementById('syncButton');
            syncButton.disabled = true;
            syncButton.querySelector('i').classList.add('spinning');
            
            try {
                // Google Sheets ID from the URL
                const sheetId = '1Vbnhqi3AAcBy-tX9Udp67JaHtCBSzTy25lyB-r4E95Q';
                
                // Fetch the data using Google Sheets API
                const response = await fetch(`https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv`);
                
                if (!response.ok) {
                    throw new Error('Failed to fetch data from Google Sheets');
                }
                
                const csvData = await response.text();
                
                // Parse CSV data
                databaseData = parseCSV(csvData);
                
                // Update last sync time
                const now = new Date();
                document.getElementById('lastSyncTime').textContent = `Last sync: ${now.toLocaleTimeString()}`;
                
                // Process and display data
                processData();
                filterAndDisplayData();
                
                // Success notification
                showNotification('Data synchronized successfully from Google Sheets!', 'success');
            } catch (error) {
                console.error('Error fetching data:', error);
                showNotification('Failed to sync data. Using sample data instead.', 'error');
                
                // Fallback to sample data if Google Sheets fetch fails
                databaseData = generateSampleData();
                processData();
                filterAndDisplayData();
            } finally {
                // Reset button state
                syncButton.disabled = false;
                syncButton.querySelector('i').classList.remove('spinning');
            }
        }

        function parseCSV(csvText) {
            // Split by lines and get headers
            const lines = csvText.split('\n');
            const headers = lines[0].split(',').map(header => 
                header.replace(/"/g, '').trim().toLowerCase()
            );
            
            const result = [];
            
            // Process each line
            for (let i = 1; i < lines.length; i++) {
                if (!lines[i].trim()) continue; // Skip empty lines
                
                // Handle quoted values with commas inside them
                const row = {};
                let currentLine = lines[i];
                let values = [];
                let inQuotes = false;
                let currentValue = '';
                
                for (let j = 0; j < currentLine.length; j++) {
                    const char = currentLine[j];
                    
                    if (char === '"') {
                        inQuotes = !inQuotes;
                    } else if (char === ',' && !inQuotes) {
                        values.push(currentValue.trim());
                        currentValue = '';
                    } else {
                        currentValue += char;
                    }
                }
                
                // Add the last value
                values.push(currentValue.trim());
                
                // Create object from headers and values
                for (let j = 0; j < headers.length; j++) {
                    if (j < values.length) {
                        let value = values[j].replace(/"/g, '').trim();
                        row[headers[j]] = value;
                    }
                }
                
                // Ensure all required fields exist
                const requiredFields = ['id', 'system_name', 'ip', 'hostname', 'type_db', 'environment', 'status'];
                const hasAllRequired = requiredFields.every(field => row[field] !== undefined);
                
                if (hasAllRequired) {
                    result.push(row);
                }
            }
            
            return result;
        }

        function generateSampleData() {
            const dbTypes = ['MySQL', 'PostgreSQL', 'MSSQL', 'MariaDB', 'Oracle', 'MongoDB', 'Redis', 'SQLite'];
            const environments = ['PROD', 'DEV', 'UAT', 'SIT'];
            const statuses = ['Active', 'Inactive', 'Maintenance'];
            const priorities = ['High', 'Medium', 'Low'];
            const osOptions = ['Linux', 'Windows Server 2019', 'Windows Server 2016', 'Ubuntu 20.04', 'CentOS 7'];
            
            const data = [];
            
            // Generate sample data that matches the example breakdown
            const typeDistribution = {
                'MSSQL': { 'PROD': 15, 'DEV': 14, 'UAT': 1, 'SIT': 0 },
                'MariaDB': { 'PROD': 112, 'DEV': 58, 'UAT': 15, 'SIT': 7 },
                'MongoDB': { 'PROD': 2, 'DEV': 3, 'UAT': 5, 'SIT': 3 },
                'MySQL': { 'PROD': 84, 'DEV': 42, 'UAT': 10, 'SIT': 4 },
                'Oracle': { 'PROD': 4, 'DEV': 0, 'UAT': 3, 'SIT': 4 },
                'PostgreSQL': { 'PROD': 45, 'DEV': 28, 'UAT': 4, 'SIT': 3 },
                'Redis': { 'PROD': 2, 'DEV': 5, 'UAT': 1, 'SIT': 6 },
                'SQLite': { 'PROD': 4, 'DEV': 1, 'UAT': 5, 'SIT': 2 }
            };
            
            let id = 1;
            
            // Generate data based on the distribution
            for (const [dbType, envCounts] of Object.entries(typeDistribution)) {
                for (const [env, count] of Object.entries(envCounts)) {
                    for (let i = 0; i < count; i++) {
                        const status = statuses[Math.floor(Math.random() * statuses.length)];
                        
                        data.push({
                            id: id.toString(),
                            system_name: `System-${id}`,
                            ip: `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,
                            hostname: `host-db-${id}.example.com`,
                            type_db: dbType,
                            version: `${Math.floor(Math.random() * 10)}.${Math.floor(Math.random() * 10)}`,
                            edition: Math.random() > 0.5 ? 'Enterprise' : 'Standard',
                            os: osOptions[Math.floor(Math.random() * osOptions.length)],
                            priority: priorities[Math.floor(Math.random() * priorities.length)],
                            end_of_support: new Date(2023 + Math.floor(Math.random() * 5), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString().split('T')[0],
                            environment: env,
                            note: `Sample note for database ${id}`,
                            housekeep: Math.random() > 0.5 ? 'Yes' : 'No',
                            pic: `User ${Math.floor(Math.random() * 10) + 1}`,
                            status: status
                        });
                        
                        id++;
                    }
                }
            }
            
            return data;
        }

        function processData() {
            // Process data for stats cards
            updateStatsCards();
            
            // Process data for charts
            updateCharts();
            
            // Process data for database breakdown table
            updateDatabaseBreakdown();
        }

        function updateStatsCards() {
            const totalServers = databaseData.length;
            const prodServers = databaseData.filter(db => db.environment && db.environment.toUpperCase().includes('PROD')).length;
            const devServers = databaseData.filter(db => 
                db.environment && 
                (db.environment.toUpperCase().includes('DEV') || 
                 db.environment.toUpperCase().includes('SIT') || 
                 db.environment.toUpperCase().includes('UAT'))
            ).length;
            const testServers = databaseData.filter(db => 
                db.environment && 
                (db.environment.toUpperCase().includes('UAT') || 
                 db.environment.toUpperCase().includes('SIT'))
            ).length;
            
            document.getElementById('totalServers').textContent = totalServers;
            document.getElementById('prodServers').textContent = prodServers;
            document.getElementById('devServers').textContent = devServers;
            document.getElementById('testServers').textContent = testServers;
            
            // Random change percentages for demo
            document.getElementById('totalServersChange').textContent = `${Math.floor(Math.random() * 20) + 1}%`;
            document.getElementById('prodServersChange').textContent = `${Math.floor(Math.random() * 15) + 1}%`;
            document.getElementById('devServersChange').textContent = `${Math.floor(Math.random() * 10) + 1}%`;
            document.getElementById('testServersChange').textContent = `${Math.floor(Math.random() * 25) + 1}%`;
        }

        function updateCharts() {
            // Update Database Type Chart
            updateDbTypeChart('all');
            
            // Update Database Environment Chart
            const envCounts = {
                'PROD': databaseData.filter(db => db.environment && db.environment.toUpperCase().includes('PROD')).length,
                'DEV': databaseData.filter(db => db.environment && db.environment.toUpperCase().includes('DEV')).length,
                'UAT': databaseData.filter(db => db.environment && db.environment.toUpperCase().includes('UAT')).length,
                'SIT': databaseData.filter(db => db.environment && db.environment.toUpperCase().includes('SIT')).length
            };
            
            dbEnvChart.data.datasets[0].data = [
                envCounts['PROD'],
                envCounts['DEV'],
                envCounts['UAT'],
                envCounts['SIT']
            ];
            dbEnvChart.update();
        }

        function updateDbTypeChart(filter) {
            // Filter data based on selection
            let filteredForChart = databaseData;
            if (filter === 'prod') {
                filteredForChart = databaseData.filter(db => db.environment && db.environment.toUpperCase().includes('PROD'));
            }
            
            // Count databases by type
            const dbTypeCounts = {};
            filteredForChart.forEach(db => {
                if (!db.type_db) return;
                
                const dbType = db.type_db.trim();
                if (!dbTypeCounts[dbType]) {
                    dbTypeCounts[dbType] = 0;
                }
                dbTypeCounts[dbType]++;
            });
            
            // Update chart
            dbTypeChart.data.labels = Object.keys(dbTypeCounts);
            dbTypeChart.data.datasets[0].data = Object.values(dbTypeCounts);
            dbTypeChart.update();
        }

        function updateDatabaseBreakdown() {
            // Count databases by type and environment
            const breakdownData = {};
            
            // Initialize with all database types we expect to see
            const expectedTypes = ['MSSQL', 'MariaDB', 'MongoDB', 'MySQL', 'Oracle', 'PostgreSQL', 'Redis', 'SQLite'];
            expectedTypes.forEach(type => {
                breakdownData[type] = {
                    'PROD': 0,
                    'DEV': 0,
                    'UAT': 0,
                    'SIT': 0,
                    'Total': 0
                };
            });
            
            // Count actual data
            databaseData.forEach(db => {
                if (!db.type_db) return;
                
                const dbType = db.type_db.trim();
                if (!breakdownData[dbType]) {
                    breakdownData[dbType] = {
                        'PROD': 0,
                        'DEV': 0,
                        'UAT': 0,
                        'SIT': 0,
                        'Total': 0
                    };
                }
                
                if (db.environment) {
                    const env = db.environment.toUpperCase();
                    if (env.includes('PROD')) breakdownData[dbType]['PROD']++;
                    else if (env.includes('DEV')) breakdownData[dbType]['DEV']++;
                    else if (env.includes('UAT')) breakdownData[dbType]['UAT']++;
                    else if (env.includes('SIT')) breakdownData[dbType]['SIT']++;
                }
                
                breakdownData[dbType]['Total']++;
            });
            
            // Populate table
            const tableBody = document.getElementById('dbBreakdownTable');
            tableBody.innerHTML = '';
            
            // Sort database types by PROD count in descending order
            const sortedTypes = Object.keys(breakdownData).sort((a, b) => {
                return breakdownData[b]['PROD'] - breakdownData[a]['PROD'];
            });
            
            sortedTypes.forEach(dbType => {
                const counts = breakdownData[dbType];
                const row = document.createElement('tr');
                
                // Only show rows with at least one database
                if (counts['Total'] > 0) {
                    row.innerHTML = `
                        <td class="font-medium">${dbType}</td>
                        <td>${counts['PROD']}</td>
                        <td>${counts['DEV']}</td>
                        <td>${counts['UAT']}</td>
                        <td>${counts['SIT']}</td>
                        <td class="font-medium">${counts['Total']}</td>
                        <td>
                            <div class="flex space-x-2">
                                <button class="action-icon text-blue-600">
                                    <i class="fas fa-chart-bar"></i>
                                </button>
                                <button class="action-icon text-green-600">
                                    <i class="fas fa-file-export"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    tableBody.appendChild(row);
                }
            });
        }

        function filterAndDisplayData() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filterValue = document.getElementById('filterSelect').value;
            
            filteredData = databaseData.filter(db => {
                const matchesSearch = 
                    (db.system_name && db.system_name.toLowerCase().includes(searchTerm)) ||
                    (db.hostname && db.hostname.toLowerCase().includes(searchTerm)) ||
                    (db.ip && db.ip.toLowerCase().includes(searchTerm)) ||
                    (db.type_db && db.type_db.toLowerCase().includes(searchTerm));
                
                let matchesFilter = true;
                if (filterValue !== 'all') {
                    matchesFilter = db.environment && db.environment.toUpperCase().includes(filterValue);
                }
                
                return matchesSearch && matchesFilter;
            });
            
            currentPage = 1;
            displayDatabases();
        }

        function displayDatabases() {
            const tableBody = document.getElementById('allDatabasesTable');
            tableBody.innerHTML = '';
            
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, filteredData.length);
            const pageData = filteredData.slice(startIndex, endIndex);
            
            pageData.forEach(db => {
                const row = document.createElement('tr');
                
                // Determine status badge class
                let statusClass = 'status-active';
                if (db.status && db.status.toLowerCase().includes('inactive')) statusClass = 'status-inactive';
                if (db.status && db.status.toLowerCase().includes('maintenance')) statusClass = 'status-maintenance';
                
                // Format environment display
                let envDisplay = db.environment || '';
                let envClass = '';
                
                if (envDisplay.toUpperCase().includes('PROD')) {
                    envClass = 'bg-red-100 text-red-800';
                } else if (envDisplay.toUpperCase().includes('DEV')) {
                    envClass = 'bg-blue-100 text-blue-800';
                } else if (envDisplay.toUpperCase().includes('UAT')) {
                    envClass = 'bg-orange-100 text-orange-800';
                } else if (envDisplay.toUpperCase().includes('SIT')) {
                    envClass = 'bg-green-100 text-green-800';
                }
                
                row.innerHTML = `
                    <td>${db.id || ''}</td>
                    <td class="font-medium">${db.system_name || ''}</td>
                    <td>${db.ip || ''}</td>
                    <td>${db.hostname || ''}</td>
                    <td>${db.type_db || ''}</td>
                    <td>${db.version || ''}</td>
                    <td>${db.os || ''}</td>
                    <td>${db.priority || ''}</td>
                    <td>
                        <span class="px-2 py-1 rounded-full text-xs font-medium ${envClass}">
                            ${envDisplay}
                        </span>
                    </td>
                    <td><span class="status-badge ${statusClass}">${db.status || ''}</span></td>
                    <td>
                        <div class="flex space-x-2">
                            <button class="action-icon text-blue-600" onclick="editDatabase('${db.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="action-icon text-red-600" onclick="deleteDatabase('${db.id}')">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    </td>
                `;
                tableBody.appendChild(row);
            });
            
            // Update pagination info
            document.getElementById('visibleCount').textContent = pageData.length;
            document.getElementById('totalCount').textContent = filteredData.length;
            document.getElementById('pageIndicator').textContent = `Page ${currentPage}`;
            
            // Update pagination buttons
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = endIndex >= filteredData.length;
        }

        function showAddNewModal() {
            // Set modal to add mode
            isEditMode = false;
            document.getElementById('modalTitle').textContent = 'Add New Database';
            
            // Clear form fields
            document.getElementById('editId').value = '';
            document.getElementById('editSystemName').value = '';
            document.getElementById('editIp').value = '';
            document.getElementById('editHostname').value = '';
            document.getElementById('editType').value = 'MySQL';
            document.getElementById('editVersion').value = '';
            document.getElementById('editEdition').value = '';
            document.getElementById('editOs').value = '';
            document.getElementById('editPriority').value = 'Medium';
            document.getElementById('editEndOfSupport').value = '';
            document.getElementById('editEnvironment').value = 'DEV';
            document.getElementById('editPic').value = '';
            document.getElementById('editStatus').value = 'Active';
            document.getElementById('editNote').value = '';
            
            // Show modal
            document.getElementById('editModal').classList.remove('hidden');
        }

        function editDatabase(id) {
            // Set modal to edit mode
            isEditMode = true;
            document.getElementById('modalTitle').textContent = 'Edit Database';
            
            const db = databaseData.find(item => item.id === id);
            if (!db) return;
            
            // Populate form fields
            document.getElementById('editId').value = db.id || '';
            document.getElementById('editSystemName').value = db.system_name || '';
            document.getElementById('editIp').value = db.ip || '';
            document.getElementById('editHostname').value = db.hostname || '';
            document.getElementById('editType').value = db.type_db || 'MySQL';
            document.getElementById('editVersion').value = db.version || '';
            document.getElementById('editEdition').value = db.edition || '';
            document.getElementById('editOs').value = db.os || '';
            document.getElementById('editPriority').value = db.priority || 'Medium';
            document.getElementById('editEndOfSupport').value = db.end_of_support || '';
            document.getElementById('editEnvironment').value = db.environment || 'PROD';
            document.getElementById('editPic').value = db.pic || '';
            document.getElementById('editStatus').value = db.status || 'Active';
            document.getElementById('editNote').value = db.note || '';
            
            // Show modal
            document.getElementById('editModal').classList.remove('hidden');
        }

        function closeModal() {
            document.getElementById('editModal').classList.add('hidden');
        }

        function saveChanges() {
            const id = document.getElementById('editId').value;
            const index = databaseData.findIndex(item => item.id === id);
            
            if (index === -1) return;
            
            // Update database object
            databaseData[index] = {
                ...databaseData[index],
                system_name: document.getElementById('editSystemName').value,
                ip: document.getElementById('editIp').value,
                hostname: document.getElementById('editHostname').value,
                type_db: document.getElementById('editType').value,
                version: document.getElementById('editVersion').value,
                edition: document.getElementById('editEdition').value,
                os: document.getElementById('editOs').value,
                priority: document.getElementById('editPriority').value,
                end_of_support: document.getElementById('editEndOfSupport').value,
                environment: document.getElementById('editEnvironment').value,
                pic: document.getElementById('editPic').value,
                status: document.getElementById('editStatus').value,
                note: document.getElementById('editNote').value
            };
            
            // Close modal
            closeModal();
            
            // Update UI
            processData();
            filterAndDisplayData();
            
            // Show notification
            showNotification('Database updated successfully!', 'success');
        }

        function addNewDatabase() {
            // Generate new ID (highest ID + 1)
            const newId = databaseData.length > 0 
                ? (Math.max(...databaseData.map(db => parseInt(db.id))) + 1).toString()
                : "1";
            
            // Create new database object
            const newDatabase = {
                id: newId,
                system_name: document.getElementById('editSystemName').value,
                ip: document.getElementById('editIp').value,
                hostname: document.getElementById('editHostname').value,
                type_db: document.getElementById('editType').value,
                version: document.getElementById('editVersion').value,
                edition: document.getElementById('editEdition').value,
                os: document.getElementById('editOs').value,
                priority: document.getElementById('editPriority').value,
                end_of_support: document.getElementById('editEndOfSupport').value,
                environment: document.getElementById('editEnvironment').value,
                pic: document.getElementById('editPic').value,
                status: document.getElementById('editStatus').value,
                note: document.getElementById('editNote').value
            };
            
            // Add to database data
            databaseData.push(newDatabase);
            
            // Close modal
            closeModal();
            
            // Update UI
            processData();
            filterAndDisplayData();
            
            // Show notification
            showNotification('New database added successfully!', 'success');
        }

        function deleteDatabase(id) {
            if (confirm('Are you sure you want to delete this database?')) {
                const index = databaseData.findIndex(item => item.id === id);
                
                if (index !== -1) {
                    databaseData.splice(index, 1);
                    
                    // Update UI
                    processData();
                    filterAndDisplayData();
                    
                    // Show notification
                    showNotification('Database deleted successfully!', 'success');
                }
            }
        }

        function showNotification(message, type) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed bottom-4 right-4 px-6 py-3 rounded-md shadow-lg z-50 ${
                type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
            }`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            
            // Add to document
            document.body.appendChild(notification);
            
            // Remove after delay
            setTimeout(() => {
                notification.classList.add('opacity-0', 'transition-opacity', 'duration-500');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 500);
            }, 3000);
        }

        // Make functions available globally for onclick handlers
        window.editDatabase = editDatabase;
        window.deleteDatabase = deleteDatabase;
    </script>
</body>
</html>
